First, clone or download: https://github.com/vsuthichai/paraphraser/tree/master . I structured the project as:
	data_gen-->models-->paraphraser-->paraphraser and will refer to these file paths throughout the rest of these notes
	
Download the pre-trained model and extract the checkpoint files. The location is arbitrary as it will just be passed 
in as a sys arg when running the modified inference script. I staged the pre-trained model checkpoint files under
	data_gen-->models-->paraphraser-->trained_model_checkpoints-->train-20180325-001253
	
Next we need to download the Paraphrastic Sentence Embeddings. Create a new directory directly under 
data_gen-->models-->paraphraser named para-nmt-50m. Download the embeddings from
(https://drive.google.com/u/0/uc?id=1l2liCZqWX3EfYpzv9OmVatJAEISPFihW&export=download) and extract them
in this newly created directory.
 
Due to outdated API and non-backwards compatibility of tensorflow, we will need to install some specific tool chains in order
to get this model running. To isolate the toolchain from the other models, start by creating a new virtual environment by 
choosing a Python interpreter and making a .\venv directory to hold it:
C:\Users\nickg\Documents\cse576\project\data_gen\models\paraphraser>python -m venv --system-site-packages paraphraser_venv
 
Activate the virtual environment:
C:\Users\nickg\Documents\cse576\project\data_gen\models\paraphraser>paraphraser_venv\Scripts\activate

Navigate to paraphraser root: cd C:\Users\nickg\Documents\cse576\project\data_gen\models\paraphraser
Install python 3.6, I specifically used Python 3.6.8
pip install --upgrade tensorflow==1.4.0
pip install spacy
python -m spacy download en

Run the modified inference python script, using the checkpoint files to load the trained model:
C:\Users\nickg\Documents\cse576\project\data_gen\models\paraphraser\paraphraser>python inference.py --checkpoint=C:\Users\nickg\Documents\cse576\project\data_gen\models\paraphraser\trained_model_checkpoints\train-20180325-001253\model-171856

The original script in https://github.com/vsuthichai/paraphraser/tree/master takes input from the command line and generates a 
fixed number of paraphrases at a fixed sampling temperature. We built a custom data loader


Generating datasets using tensorflow:
Unanswerable:
squad 2.0: https://www.tensorflow.org/datasets/catalog/squad#squadv20 <-- need to generate plausible answers
To generate plausible answers - we will use the rankqa system which attempts to generate top k most likely answers given the question and context
	- it remain to prove that this still leaves the question unanswerable
	
RankQA: https://github.com/bernhard2202/rankqa/tree/master/rankqa
C:\Users\nickg\Documents\cse576\project\data_gen\models\rankqa>python -m venv --system-site-packages rankqa_venv
C:\Users\nickg\Documents\cse576\project\data_gen\models\rankqa>rankqa_venv\Scripts\activate

Answerable: (to be fed to Zhu et. al model)
	we need to possibly generalize the model to allow the answerto be given instead of the answer span indices
	what happens when the answer given isn't a span in the context paragraph?
ai2_arc: https://www.tensorflow.org/datasets/catalog/ai2_arc
